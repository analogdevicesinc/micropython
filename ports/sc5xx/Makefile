# select target board
BOARD ?= sam
ifeq ($(wildcard boards/$(BOARD)/.),)
$(error Invalid BOARD specified)
endif

include boards/$(BOARD)/mpconfigboard.mk

# If the build directory is not given, make it reflect the board name.
BUILD ?= build-$(BOARD)

include ../../py/mkenv.mk

# qstr definitions (must come before including py.mk)
QSTR_DEFS = qstrdefsport.h $(BUILD)/pins_qstr.h

# include py core make definitions
include $(TOP)/py/py.mk

CROSS_COMPILE = arm-none-eabi-

INC += -I.
INC += -I$(TOP)
INC += -I$(BUILD)
INC += -Iboards/$(BOARD)
INC += -Imodules/machine
INC += -Imodules/board
INC += -Isystem

CFLAGS = $(INC) -std=c99 -Wall -Werror -g -gdwarf-2 -ffunction-sections -fdata-sections -DCORE0  $(CFLAGS_MOD) $(CFLAGS_EXTRA) $(COPT)

# Debugging/Optimization
ifeq ($(DEBUG), 1)
COPT += -O0 -ggdb
else
COPT += -Os -DNDEBUG
endif

LIBS = -lm

SRC_DRIVERS = $(addprefix drivers/,\
	bus/softspi.c \
	bus/softqspi.c \
	memory/spiflash.c \
	)

SRC_C = \
	apt-sc589.c \
	bm_spi.c \
	bm_twi.c \
	bm_uart.c \
	fatfs_port.c \
	gccollect.c \
	main.c \
	mphalport.c \
	pin_defs_sc5xx.c \
	rsi.c \
	sdcard.c \
	systick.c \

SRC_C += $(addprefix modules/,\
	machine/extint.c \
	machine/i2c.c \
	machine/machine_i2c.c \
	machine/machine_spi.c \
	machine/modmachine.c \
	machine/pin.c \
	machine/pin_named_pins.c \
	machine/spi.c \
	sharc/modsharc.c \
	utime/modutime.c \
	uos/moduos.c \
	)

# Include configurations generated by CCES
SRC_ADI = \
	system/heap_stack/app_heap_stack.c \
	system/mcapi/GeneratedSources/mcapi_config.c \
	system/pinmux/GeneratedSources/pinmux_config.c \
	system/sru/sru_config.c \
	system/adi_initialize.c \
	
SRC_LIB = $(addprefix lib/,\
	libc/string0.c \
	oofatfs/ff.c \
	oofatfs/ffunicode.c \
	mp-readline/readline.c \
	timeutils/timeutils.c \
	utils/pyexec.c \
	utils/interrupt_char.c \
	utils/sys_stdio_mphal.c \
	)

ifeq ($(MICROPY_FLOAT_IMPL),double)
SRC_LIBM = $(addprefix lib/libm_dbl/,\
	__cos.c \
	__expo2.c \
	__fpclassify.c \
	__rem_pio2.c \
	__rem_pio2_large.c \
	__signbit.c \
	__sin.c \
	__tan.c \
	acos.c \
	acosh.c \
	asin.c \
	asinh.c \
	atan.c \
	atan2.c \
	atanh.c \
	ceil.c \
	cos.c \
	cosh.c \
	copysign.c \
	erf.c \
	exp.c \
	expm1.c \
	floor.c \
	fmod.c \
	frexp.c \
	ldexp.c \
	lgamma.c \
	log.c \
	log10.c \
	log1p.c \
	modf.c \
	nearbyint.c \
	pow.c \
	rint.c \
	scalbn.c \
	sin.c \
	sinh.c \
	sqrt.c \
	tan.c \
	tanh.c \
	tgamma.c \
	trunc.c \
	)
else
SRC_LIBM = $(addprefix lib/libm/,\
	math.c \
	acoshf.c \
	asinfacosf.c \
	asinhf.c \
	atan2f.c \
	atanf.c \
	atanhf.c \
	ef_rem_pio2.c \
	erf_lgamma.c \
	fmodf.c \
	kf_cos.c \
	kf_rem_pio2.c \
	kf_sin.c \
	kf_tan.c \
	log1pf.c \
	nearbyintf.c \
	sf_cos.c \
	sf_erf.c \
	sf_frexp.c \
	sf_ldexp.c \
	sf_modf.c \
	sf_sin.c \
	sf_tan.c \
	wf_lgamma.c \
	wf_tgamma.c \
	ef_sqrt.c \
	)
endif

OBJ =
OBJ += $(PY_O)
OBJ += $(addprefix $(BUILD)/, $(SRC_LIB:.c=.o))
OBJ += $(addprefix $(BUILD)/, $(SRC_LIBM:.c=.o))
OBJ += $(addprefix $(BUILD)/, $(SRC_DRIVERS:.c=.o))
OBJ += $(addprefix $(BUILD)/, $(SRC_ADI:.c=.o))
OBJ += $(addprefix $(BUILD)/, $(SRC_C:.c=.o))
OBJ += $(addprefix $(BUILD)/, $(SRC_O))
OBJ += $(BUILD)/pins_gen.o

all: $(BUILD)/firmware

$(BUILD)/firmware: $(OBJ)
	$(ECHO) "LINK $@"
	arm-none-eabi-gcc --specs=nosys.specs -mproc=ADSP-SC589 -msi-revision=1.0 -Wl,--gc-sections -Wl,-M=ARMcode.map -o $@ $^ $(LIBS)
	$(Q)$(SIZE) $@

# List of sources for qstr extraction
SRC_QSTR += $(SRC_C)

# Append any auto-generated sources that are needed by sources listed in
# SRC_QSTR
SRC_QSTR_AUTO_DEPS +=

# Making OBJ use an order-only depenedency on the generated pins.h file
# has the side effect of making the pins.h file before we actually compile
# any of the objects. The normal dependency generation will deal with the
# case when pins.h is modified. But when it doesn't exist, we don't know
# which source files might need it.
$(OBJ): | $(HEADER_BUILD)/pins.h

# Use a pattern rule here so that make will only call make-pins.py once to make
# both pins_gen.c and pins.h
$(BUILD)/%_gen.c $(HEADER_BUILD)/%.h $(HEADER_BUILD)/%_af_const.h $(BUILD)/%_qstr.h: boards/$(BOARD)/%.csv $(MAKE_PINS) $(AF_FILE) $(PREFIX_FILE) | $(HEADER_BUILD)
	$(ECHO) "Create $@"
	$(Q)$(PYTHON) $(MAKE_PINS) --board $(BOARD_PINS) --af $(AF_FILE) --af-defs $(AF_DEFS_FILE) --prefix $(PREFIX_FILE) --hdr $(GEN_PINS_HDR) --qstr $(GEN_PINS_QSTR) --af-const $(GEN_PINS_AF_CONST) --af-py $(GEN_PINS_AF_PY) > $(GEN_PINS_SRC)

$(BUILD)/pins_gen.o: $(BUILD)/pins_gen.c
	$(call compile_c)

MAKE_PINS = boards/make-pins.py
BOARD_PINS = boards/$(BOARD)/pins.csv
AF_FILE = boards/$(SOC_VARIANT)_af.csv
AF_DEFS_FILE = $(BUILD)/pins_af_defs.h
PREFIX_FILE = boards/sc5xx_prefix.c
GEN_PINS_SRC = $(BUILD)/pins_gen.c
GEN_PINS_HDR = $(HEADER_BUILD)/pins.h
GEN_PINS_QSTR = $(BUILD)/pins_qstr.h
GEN_PINS_AF_CONST = $(HEADER_BUILD)/pins_af_const.h
GEN_PINS_AF_PY = $(BUILD)/pins_af.py

include $(TOP)/py/mkrules.mk
